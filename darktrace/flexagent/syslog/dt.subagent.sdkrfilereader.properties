do.unparsed.events=true

regex=[^\\{](.*)(..)

token.count=2

token[0].name=allLog
token[0].type=String

token[1].name=lastCharacters
token[1].type=String

event.message=lastCharacters

event.endTime=__createLocalTimeStampFromSecondsSinceEpoch(__regexToken(allLog,".*.time.:(\\d+)000,.model.:{.*"))

submessage.messageid.token=lastCharacters
submessage.token=allLog
submessage.count=1

# Mapping to avoid log truncate
submessage[0].messageid!=}}
submessage[0].pattern.count=1
submessage[0].pattern[0].regex=.*breachUrl\\":\\".*#modelbreach\\/([^"]*)\\".*\\"time\\":.*\\"model\\":\\{\\"name\\":\\"([^"]*).*\\"priority\\":([^,]*),.*\\"description\\":\\"([^"]*)\\",\\"behaviour.*
submessage[0].pattern[0].fields=event.externalId,event.name,event.priority,event.message

# Rempove backslashes (bug in JSON parser)
event.deviceCustomString6Label=__stringConstant("Others")
event.customString6=__replaceAll(__concatenate("{",__regexToken(allLog,".*(.triggeredFilters.:\\[.*\\])\\}\\]"),"}"),"(\\\\)","\x5C\x5C")

# Raw event cleaning (removal of triggeredComponent)
event.rawEvent=__concatenate(__regexToken(__concatenate(allLog,lastCharacters),"[^\\{]*(\\{.*),.triggeredComponents.:\\[.*"),__regexToken(__concatenate(allLog,lastCharacters),".*.triggeredFilters.:\\[.*\\}\\](,.score..*)"))

event.deviceVendor=__stringConstant("DarkTrace")
event.deviceProduct=__stringConstant("DarkTrace")


extraprocessor.count=2

extraprocessor[1].type=json
extraprocessor[1].filename=main
extraprocessor[1].field=event.rawEvent
extraprocessor[1].clearfieldafterparsing=false
extraprocessor[1].flexagent=true
extraprocessor[1].overrideeventmappings=true

#On parse le triggers Filter
extraprocessor[0].type=json
extraprocessor[0].filename=triggeredFilters
extraprocessor[0].field=event.deviceCustomString6
extraprocessor[0].clearfieldafterparsing=false
extraprocessor[0].flexagent=true
extraprocessor[0].overrideeventmappings=true
