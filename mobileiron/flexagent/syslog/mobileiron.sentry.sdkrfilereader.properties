# FlexAgent Regex Configuration File
do.unparsed.events=true
comments.start.with=\#
trim.tokens=true
contains.empty.tokens=true
additionaldata.enabled=true

regex=.*PRODUCT=Sentry_(\\S+),(\\d{4} \\S{3} \\d+ \\d{2}:\\d{2}:\\d{2})\\s*(\\S+)\\s*(?:\\(Device=(\\S*),\\s*DeviceIPPort=(\\S*),\\s*User=(\\S*),\\s*Command=(\\S*),\\s*Server=(\\S*),\\s*Service=(\\S*)\\))*\\s*(?:\\(AlertOrigin=(\\S+),\\s*AlertId=(\\S+)\\))*\\s*(.*)

token.count=12

token[0].name=version
token[0].type=String

token[1].name=datetime
token[1].type=TimeStamp
token[1].format=yyyy MMM dd HH:mm:ss

token[2].name=severity
token[2].type=String

token[3].name=device
token[3].type=String

token[4].name=deviceipport
token[4].type=String

token[5].name=user
token[5].type=String

token[6].name=command
token[6].type=String

token[7].name=server
token[7].type=String

token[8].name=service
token[8].type=String

token[9].name=alertorigin
token[9].type=String

token[10].name=alertid
token[10].type=String

token[11].name=message
token[11].type=String


# Mapping

event.deviceVendor=__stringConstant("MobileIron")
event.deviceProduct=__stringConstant("Sentry")

event.deviceVersion=version
event.deviceSeverity=severity

event.endTime=datetime

event.name=__oneOf(alertid, __stringConstant("MobileIron Sentry log"))
event.message=message

event.sourceUserName=user
event.sourceAddress=__splitAsAddress(deviceipport,":",1)
event.sourcePort=__splitAsInteger(deviceipport,":",2)

event.destinationHostName=__split(server,":",2)

event.deviceCustomString1=device
event.deviceCustomString1Label=__stringConstant("Device")

event.deviceCustomString2=command
event.deviceCustomString2Label=__stringConstant("Command")

event.deviceCustomString3=service
event.deviceCustomString3Label=__stringConstant("Service")

event.deviceCustomString4=alertorigin
event.deviceCustomString4Label=__stringConstant("Alert Origin")


event.priority=__integerConstant("3")


conditionalmap.count=1

conditionalmap[0].field=event.deviceSeverity
conditionalmap[0].mappings.count=2

conditionalmap[0].mappings[0].values=ERROR
conditionalmap[0].mappings[0].event.priority=__integerConstant("7")
conditionalmap[0].mappings[0].event.categoryOutcome=__stringConstant("/Failure")
conditionalmap[0].mappings[1].values=WARN
conditionalmap[0].mappings[1].event.priority=__integerConstant("5")
conditionalmap[0].mappings[1].event.categoryOutcome=__stringConstant("/Failure")


# Sub message
submessage.token=message

submessage.count=1

submessage[0].pattern.count=2
submessage[0].pattern[0].regex=(RemoteConnectFailureException.*)
submessage[0].pattern[0].fields=event.message
submessage[0].pattern[0].extramappings=event.name\=__stringConstant("RemoteConnectFailureException")

submessage[0].pattern[1].regex=(HTTP response \\d+)\\s*URI:\\s*(\\S+)
submessage[0].pattern[1].fields=event.name,event.requestUrl

