key.delimiter=\\;\\s*
key.value.delimiter=\\:\\s*
key.regexp=([^\\s]+)

trim.tokens=true
trim.message=true
trim.keys=true

# Token types
token.count=23

token[0].name=Action
token[0].type=String

token[1].name=Origin
token[1].type=IPAddress

token[2].name=src
token[2].type=IPAddress

token[3].name=dst
token[3].type=IPAddress

token[4].name=ProductName
token[4].type=String

token[5].name=OriginSicName
token[5].type=String

token[6].name=InterfaceName
token[6].type=String

token[7].name=inzone
token[7].type=String

token[8].name=outzone
token[8].type=String

token[9].name=proto
token[9].type=String

token[10].name=xlatesrc
token[10].type=IPAddress

token[11].name=xlatedst
token[11].type=IPAddress

token[12].name=xlatesport_svc
token[12].type=String

token[13].name=xlatedport_svc
token[13].type=String

token[14].name=message_info
token[14].type=String

token[15].name=sport_svc
token[15].type=String

token[16].name=svc
token[16].type=String

token[17].name=date
token[17].type=String

token[18].name=hour
token[18].type=String

token[19].name=default_device_message
token[19].type=String

token[20].name=facility
token[20].type=String

token[21].name=syslog_severity
token[21].type=String

token[22].name=Info
token[22].type=String

# Token mapping

event.name=Action
event.deviceAddress=Origin

# Format hostname
event.deviceHostName=__toUpperCase(__replaceAll(__replaceAll(OriginSicName,"[Cc][Nn]=",""),",[Oo]=.*",""))

event.sourceAddress=src
event.destinationAddress=dst

# Remove potential ; at the end of Product name
event.deviceProduct=__replaceAll(ProductName,";","")


event.deviceInboundInterface=InterfaceName

event.deviceCustomString1=inzone
event.deviceCustomString1Label=__stringConstant("inzone")

event.deviceCustomString2=outzone
event.deviceCustomString2Label=__stringConstant("outzone")

event.transportProtocol=__getProtocolName(__safeToInteger(__replaceAll(proto,";.*","")))

event.sourceTranslatedAddress=xlatesrc
event.destinationTranslatedAddress=xlatedst
event.sourceTranslatedPort=__safeToInteger(__replaceAll(xlatesport_svc,";.*",""))
event.destinationTranslatedPort=__safeToInteger(__replaceAll(xlatedport_svc,";.*",""))

#event.message=message_info
event.message=__ifThenElse(message_info,,__ifThenElse(default_device_message,,Info,default_device_message),message_info)


event.sourcePort=__safeToInteger(__replaceAll(sport_svc,";.*",""))
event.destinationPort=__safeToInteger(__replaceAll(svc,";.*",""))

event.endTime=__safeToDate(__concatenate(date," ",hour) ,"ddMMMyyyy HH:mm:ss")

event.deviceSeverity=syslog_severity


conditionalmap.count=2

# Severity based on accept / drop
conditionalmap[0].field=event.name
conditionalmap[0].mappings.count=2
conditionalmap[0].mappings[0].values=accept
conditionalmap[0].mappings[0].event.priority=__integerConstant("3")
conditionalmap[0].mappings[0].event.categoryOutcome=__stringConstant("/Success")
conditionalmap[0].mappings[0].event.categoryBehavior=__stringConstant("/Access")
conditionalmap[0].mappings[1].values=drop,reject
conditionalmap[0].mappings[1].event.priority=__integerConstant("9")
conditionalmap[0].mappings[1].event.categoryOutcome=__stringConstant("/Failure")
conditionalmap[0].mappings[1].event.categoryBehavior=__stringConstant("/Access")

# Severity based on syslog severity
conditionalmap[1].field=event.deviceSeverity
conditionalmap[1].mappings.count=8
conditionalmap[1].mappings[0].values=Emergency,Failed
conditionalmap[1].mappings[0].event.priority=__integerConstant("10")
conditionalmap[1].mappings[1].values=Alert
conditionalmap[1].mappings[1].event.priority=__integerConstant("9")
conditionalmap[1].mappings[2].values=Critical
conditionalmap[1].mappings[2].event.priority=__integerConstant("8")
conditionalmap[1].mappings[3].values=Error
conditionalmap[1].mappings[3].event.priority=__integerConstant("7")
conditionalmap[1].mappings[4].values=Warning
conditionalmap[1].mappings[4].event.priority=__integerConstant("6")
conditionalmap[1].mappings[5].values=Notice
conditionalmap[1].mappings[5].event.priority=__integerConstant("4")
conditionalmap[1].mappings[6].values=Informational
conditionalmap[1].mappings[6].event.priority=__integerConstant("3")
conditionalmap[1].mappings[7].values=Debugging
conditionalmap[1].mappings[7].event.priority=__integerConstant("0")

